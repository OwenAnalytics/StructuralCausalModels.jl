var documenterSearchIndex = {"docs":
[{"location":"versions/#Versions-1","page":"Versions","title":"Versions","text":"","category":"section"},{"location":"acknowledgements/#Acknowledgements-1","page":"Acknowledgements","title":"Acknowledgements","text":"","category":"section"},{"location":"introduction/#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"These are some early tests to see what it would take to create a Julia version to analyse directed acyclic graph (DAG) based Structural Causal Models (SCM) as described in StatisticalRethinking and Causal Inference in Statistics.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"My initial goal for this package is to have a way to apply SCM ideas to the examples in StatisticalRethinking.jl, i.e. a working version of d_separation(), adjustment_sets() and implied_conditional_independencies().","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"StructuralCausalModels.jl is part of the StatisticalRethinkingJulia eco system.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"The package is not intended to compete with the references below and it is the intention to provide simple interoperability methods between Dagitty (and possible R's dagitty package), R's ggm package and this package.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"StructuralCausalModels.jl is not (yet?) registered. You can install it as: ] dev https://github.com/StatisticalRethinkingJulia/StructuralCausalModels.jl","category":"page"},{"location":"introduction/#Todo-1","page":"Introduction","title":"Todo","text":"","category":"section"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"A lot!","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Provide methods to generate Dagitty, GraphViz and LightGraph plots from the DAG model.\nInvestigate other ways to represent a DAG (vs. the current Dict formulation).\nMethod adjustment_sets(dag, paths) - options for conditioning\nMethod impliedConditionalIndependencies()\nInvestigate Lightgraphs.jl to display the DAGs.\nDocumentation, documatation, ...\nInteroperability methods with Dagitty and ggm.\n...","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"More testing:","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Method all_paths(dag, :x, :y) - find all paths between nodes :f and :l.\nMethod backdoor_paths(dag, paths, :x) - which are backdoor paths to :x?\nMethod open_paths(dag, paths) - which paths are open?\nMethod show_dag_path(dag, path) - show path directions using arrows\n...","category":"page"},{"location":"introduction/#Versions-1","page":"Introduction","title":"Versions","text":"","category":"section"},{"location":"introduction/#.1.0-1","page":"Introduction","title":"0.1.0","text":"","category":"section"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Initial commit to Julia's registry.","category":"page"},{"location":"introduction/#Acknowledgements-1","page":"Introduction","title":"Acknowledgements","text":"","category":"section"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Important links are:","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Dagitty\nR dagitty package\nR ggm package\nSadeghi, K. (2011). Stable classes of graphs containing directed acyclic","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"graphs, implementation as included in ggm.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"The latter two have been used as the basis for the Julia implementations of e.g. shipley_test(), d_separation() and ancestral_graph().","category":"page"},{"location":"introduction/#References-1","page":"Introduction","title":"References","text":"","category":"section"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"StatisticalRethinking\nCausal Inference in Statistics - a primer\nCause and Correlation in Biology\nSadeghi, K. (2011). Stable classes of graphs containing directed acyclic","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"graphs.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Richardson, T.S. and Spirtes, P. (2002).  Ancestral graph Markov","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"models {Annals of Statistics}, 30(4), 962-1030.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Separators and Adjustment Sets in Causal Graphs: Complete Criteria and an Algorithmic Framework","category":"page"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"CurrentModule = StructuralCausalModels","category":"page"},{"location":"#scm_path-1","page":"StructuralCausalModels API","title":"scm_path","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"scm_path(parts...)","category":"page"},{"location":"#StructuralCausalModels.scm_path-Tuple","page":"StructuralCausalModels API","title":"StructuralCausalModels.scm_path","text":"scm_path\n\nRelative path using the StatisticalRethinking src/ directory.\n\nExample to get access to the data subdirectory\n\nscm_path(\"..\", \"data\")\n\n\n\n\n\n","category":"method"},{"location":"#DAG-1","page":"StructuralCausalModels API","title":"DAG","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"DAG\nDAG(name::AbstractString, d::OrderedDict{Symbol, Vector{Symbol}}, df::DataFrame)","category":"page"},{"location":"#StructuralCausalModels.DAG","page":"StructuralCausalModels API","title":"StructuralCausalModels.DAG","text":"DAG\n\nDirected acyclic graph struct\n\nStruct\n\nDAG(\n* `name::AbstractString`                    : Variables used to compute correlation\n* `d::OrderedDict{Symbol, Vector{Symbol}}`  : DAG definition aas a Dict\n* `a::NamedArray`                           : Adjacency matrix\n* `e::NamedArray`                           : Edge matric\n* `s::NamedArray`                           : Covariance matrix\n* `df::DataFrame`                           : Variable observations\n* `vars::Vector{Symbol}`                    : Names of variables\n)\n\nPart of API, exported.\n\n\n\n\n\n","category":"type"},{"location":"#StructuralCausalModels.DAG-Tuple{AbstractString,OrderedDict{Symbol,Array{Symbol,1}},DataFrame}","page":"StructuralCausalModels API","title":"StructuralCausalModels.DAG","text":"DAG\n\nDirected acyclic graph constructor\n\nDAG(name, d, df)\n\n\nMethod\n\nDAG(\n* `name::AbstractString`                    : Variables used to compute correlation\n* `d::OrderedDict{Symbol, Vector{Symbol}}`  : DAG definition aas a Dict\n* `df::DataFrame`                           : Variable observations\n)\n\nReturns\n\n* `res::DAG`                                : Boolean result of test\n\nExtended help\n\nExample\n\nDefine and create a DAG\n\nusing StructuralCausalModels, CSV\n\ndf = CSV.read(scm_path(\"..\", \"data\", \"marks.csv\");\n\nd = OrderedDict(\n  :mechanics => [:vectors, :algebra],\n  :vectors => [:algebra],\n  :analysis => [:algebra],\n  :statistics => [:algebra, :analysis]\n);\n\ndag = DAG(\"marks\", d, df);\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nLicense\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of API, exported.\n\n\n\n\n\n","category":"method"},{"location":"#d_separation-1","page":"StructuralCausalModels API","title":"d_separation","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"d_separation(d::DAG, first::Vector{Symbol}, second::Vector{Symbol}, cond::SymbolList=nothing)","category":"page"},{"location":"#StructuralCausalModels.d_separation","page":"StructuralCausalModels API","title":"StructuralCausalModels.d_separation","text":"d_separation\n\nd_separation(d, first, second)\nd_separation(d, first, second, cond; debug)\n\n\nComputes the d_separation between 2 sets of nodes conditioned on a third set.\n\nRequired arguments\n\nd_separation(\n* `d::DAG`                             : DAG\n* `first::Vector{Symbol}`              : First set\n* `second::Vector{Symbol}`             : Second set\n)\n\nOptional arguments\n\n* `cond::Vector{Symbol}`               : Conditioning set\n* `debug=false`                        : Trace execution\n\nReturns\n\n* `res::Bool`                          : Boolean result of test\n\nExtended help\n\nExample\n\nd_separation between mechanics and statistics, conditioning on algebra\n\nusing StructuralCausalModels, CSV\n\ndf = CSV.read(scm_path(\"..\", \"data\", \"marks.csv\");\n\nd = OrderedDict(\n  :mechanics => [:vectors, :algebra],\n  :vectors => [:algebra],\n  :analysis => [:algebra],\n  :statistics => [:algebra, :analysis]\n);\n\ndag = DAG(\"marks\", d, df);\nd_separation(marks, [:statistics], [:mechanics], [:algebra]))\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nLicense\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of the API, exported.\n\n\n\n\n\n","category":"function"},{"location":"#shipley_test-1","page":"StructuralCausalModels API","title":"shipley_test","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"shipley_test(d::DAG)","category":"page"},{"location":"#StructuralCausalModels.shipley_test-Tuple{DAG}","page":"StructuralCausalModels API","title":"StructuralCausalModels.shipley_test","text":"shipley_test\n\nshipley_test(d)\n\n\nTest of all independencies implied by a given DAG\n\nComputes a simultaneous test of all independence relationships implied by a given Gaussian model defined according to a directed acyclic graph, based on the sample covariance matrix.\n\nThe test statistic is C = -2 sum(ln(pj)) where pj are the p-values of tests of conditional independence in the basis set computed by basiSet(A). The p-values are independent uniform variables on (0,1) and the statistic has exactly a chi square distribution on 2k degrees of freedom where k is the number of elements of the basis set.  Shipley (2002) calls this test Fisher's C test.\n\nMethod\n\nshipley_test(;\n* `d::Dag`                             : Directed acyclic graph\n)\n\nReturns\n\n* `res::NamedTuple`                    : (ctest=..., dof=..., pval=...)\n\nwhere:\n\nctest: Test statistic C   dof:   Degrees of freedom.   pval:  The P-value of the test, assuming a two-sided alternative.\n\nExtended help\n\nExample\n\nShipley_test for the mathematics marks data\n\nusing StructuralCausalModels, RData\n\nobjs = RData.load(scm_path(\"..\", \"data\", \"marks.rda\");\nmarks_df = objs[\"marks\"]\n\nd = OrderedDict(\n  :mechanics => [:vectors, :algebra],\n  :vectors => [:algebra],\n  :statistics => [:algebra, :analysis],\n  :analysis => [:algebra]\n);\ndag = Dag(d; df=df)\nshipley_test(dag)\n\nSee also\n\n?Dag\n?basis_set\n?pcor_test\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nReferences\n\nShipley, B. (2000). A new inferential test for path models based on directed acyclic graphs. Structural Equation Modeling, 7(2), 206–218.\n\nLicence\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of the api, exported.\n\n\n\n\n\n","category":"method"},{"location":"#basis_set-1","page":"StructuralCausalModels API","title":"basis_set","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"basis_set(dag::DAG)","category":"page"},{"location":"#StructuralCausalModels.basis_set-Tuple{DAG}","page":"StructuralCausalModels API","title":"StructuralCausalModels.basis_set","text":"basis_set\n\nDetermine basis_set\n\nbasis_set(dag)\n\n\nPart of API, not exported.\n\n\n\n\n\n","category":"method"},{"location":"#pcor-1","page":"StructuralCausalModels API","title":"pcor","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"pcor(u::Vector{Symbol}, S::NamedArray)","category":"page"},{"location":"#StructuralCausalModels.pcor-Tuple{Array{Symbol,1},NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.pcor","text":"pcor\n\npcor(u, S)\n\n\nComputes the partial correlation between two variables given a set of other variables.\n\nMethod\n\npcor(;\n* `u::Vector{Symbol}`                  : Variables used to compute correlation\n* `S::Matrix`                          : Sample covariance matrix\n)\n\nwhere:\n\nu[1], u[2]: Variables used to compute correlation between, remaining variables   are the conditioning set\n\nReturns\n\n* `res::Float64`                       : Correlation between u[1] and u[2]\n\nExtended help\n\nExample\n\nCorrelation between vectors and algebra, conditioning on analysis and statistics\n\nusing StructuralCausalModels, CSV\n\ndf = CSV.read(scm_path(\"..\", \"data\", \"marks.csv\");\nS = cov(Array(df))\n\nu = [2, 3, 4, 5]\npcor(u, S)\nu = [:vectors, :algebra, :statistics, :analysis]\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nLicense\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of the api, not exported.\n\n\n\n\n\n","category":"method"},{"location":"#Internals-1","page":"StructuralCausalModels API","title":"Internals","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"dag_vars(d::OrderedDict{Symbol, Vector{Symbol}})\nedge_matrix(d::OrderedDict{Symbol, Vector{Symbol}})\nedge_matrix(a::NamedArray, inv=false)\nadjacency_matrix(d::OrderedDict{Symbol, Vector{Symbol}})\nadjacency_matrix(e::NamedArray)\ntopological_order(a::NamedArray)\ntopological_sort(a::NamedArray)\nancester_graph(e::NamedArray)\nindicator_matrix(e::NamedArray)\ntransitive_closure(a::NamedArray)\ninduced_covariance_graph(d::DAG, sel::Vector{Symbol}, cond::SymbolList; debug=false)","category":"page"},{"location":"#StructuralCausalModels.dag_vars-Tuple{OrderedDict{Symbol,Array{Symbol,1}}}","page":"StructuralCausalModels API","title":"StructuralCausalModels.dag_vars","text":"dag_vars\n\ndag_vars(d)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.edge_matrix-Tuple{OrderedDict{Symbol,Array{Symbol,1}}}","page":"StructuralCausalModels API","title":"StructuralCausalModels.edge_matrix","text":"edge_matrix\n\nedge_matrix(d)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.edge_matrix","page":"StructuralCausalModels API","title":"StructuralCausalModels.edge_matrix","text":"edge_matrix\n\nedge_matrix(a)\nedge_matrix(a, inv)\n\n\nInternal\n\n\n\n\n\n","category":"function"},{"location":"#StructuralCausalModels.adjacency_matrix-Tuple{OrderedDict{Symbol,Array{Symbol,1}}}","page":"StructuralCausalModels API","title":"StructuralCausalModels.adjacency_matrix","text":"adjacency_matrix\n\nadjacency_matrix(d)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.adjacency_matrix-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.adjacency_matrix","text":"adjacency_matrix\n\nadjacency_matrix(e)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.topological_order-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.topological_order","text":"topological_order\n\ntopological_order(a)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.topological_sort-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.topological_sort","text":"topological_sort\n\ntopological_sort(a)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.ancester_graph-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.ancester_graph","text":"ancestor_graph\n\nancester_graph(e)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.indicator_matrix-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.indicator_matrix","text":"indicator_matrix\n\nindicator_matrix(e)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.transitive_closure-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.transitive_closure","text":"transitive_closure\n\ntransitive_closure(a)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.induced_covariance_graph-Tuple{DAG,Array{Symbol,1},Union{Nothing, Array{Symbol,1}, Symbol}}","page":"StructuralCausalModels API","title":"StructuralCausalModels.induced_covariance_graph","text":"inducedcovariancegraph\n\ninduced_covariance_graph(d, sel, cond; debug)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"scm/#Structural-Causal-Models-1","page":"Walkthrough","title":"Structural Causal Models","text":"","category":"section"}]
}
