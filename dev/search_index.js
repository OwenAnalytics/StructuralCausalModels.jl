var documenterSearchIndex = {"docs":
[{"location":"references/#References-1","page":"References","title":"References","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"StatisticalRethinking\nCausal Inference in Statistics - a primer\nCause and Correlation in Biology\nSadeghi, K. (2011). Stable classes of graphs containing directed acyclic graphs.\nRichardson, T.S. and Spirtes, P. (2002).  Ancestral graph Markov models {Annals of Statistics}, 30(4), 962-1030.\nSeparators and Adjustment Sets in Causal Graphs: Complete Criteria and an Algorithmic Framework","category":"page"},{"location":"versions/#Versions-1","page":"Versions","title":"Versions","text":"","category":"section"},{"location":"versions/#.1.0-1","page":"Versions","title":"0.1.0","text":"","category":"section"},{"location":"versions/#","page":"Versions","title":"Versions","text":"Version for initial commit to Julia's registry.\n","category":"page"},{"location":"acknowledgements/#Acknowledgements-1","page":"Acknowledgements","title":"Acknowledgements","text":"","category":"section"},{"location":"acknowledgements/#","page":"Acknowledgements","title":"Acknowledgements","text":"Important links are:","category":"page"},{"location":"acknowledgements/#","page":"Acknowledgements","title":"Acknowledgements","text":"Dagitty\nR dagitty package\nR ggm package","category":"page"},{"location":"acknowledgements/#","page":"Acknowledgements","title":"Acknowledgements","text":"The latter (both the Giordini code and the Sadeghi code) has been used as the basis for the Julia implementations of e.g. shipley_test(), d_separation(), basis_set() and ancestral_graph().","category":"page"},{"location":"introduction/#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"StructuralCausalModels.jl (SCM) is a Julia package to analyse directed acyclic graphs (DAGs) as described in StatisticalRethinking, Causal Inference in Statistics and Cause and Correlation in Biology.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"My initial goal for this package is to have a way to apply SCM ideas to the examples in StatisticalRethinking.jl, i.e. a working version of d_separation(), adjustment_sets() and implied_conditional_independencies().","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"StructuralCausalModels.jl is part of the StatisticalRethinkingJulia eco system. The package, once registered, can be installed using ] add StructuralCausalModels.","category":"page"},{"location":"introduction/#","page":"Introduction","title":"Introduction","text":"Please report issues or file pull requests on Github.","category":"page"},{"location":"walkthrough/#Structural-Causal-Models-1","page":"Walkthrough","title":"Structural Causal Models","text":"","category":"section"},{"location":"walkthrough/#DAGs-1","page":"Walkthrough","title":"DAGs","text":"","category":"section"},{"location":"walkthrough/#Basis-set-1","page":"Walkthrough","title":"Basis set","text":"","category":"section"},{"location":"walkthrough/#Paths-1","page":"Walkthrough","title":"Paths","text":"","category":"section"},{"location":"walkthrough/#Adjustment-sets-1","page":"Walkthrough","title":"Adjustment sets","text":"","category":"section"},{"location":"walkthrough/#D_separation-1","page":"Walkthrough","title":"D_separation","text":"","category":"section"},{"location":"walkthrough/#Shipley-test-1","page":"Walkthrough","title":"Shipley test","text":"","category":"section"},{"location":"walkthrough/#Partial-correlation-1","page":"Walkthrough","title":"Partial correlation","text":"","category":"section"},{"location":"walkthrough/#Ancestral-graph-1","page":"Walkthrough","title":"Ancestral graph","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"CurrentModule = StructuralCausalModels","category":"page"},{"location":"#scm_path-1","page":"StructuralCausalModels API","title":"scm_path","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"scm_path(parts...)","category":"page"},{"location":"#StructuralCausalModels.scm_path-Tuple","page":"StructuralCausalModels API","title":"StructuralCausalModels.scm_path","text":"scm_path\n\nRelative path using the StructuralCausalModels.jl src/ directory.\n\nExample to get access to the data subdirectory\n\nscm_path(\"..\", \"data\")\n\n\n\n\n\n","category":"method"},{"location":"#DAG-1","page":"StructuralCausalModels API","title":"DAG","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"DAG\nDAG(name::AbstractString, d::OrderedDict, df::DataFrame)\nDAG(name::AbstractString, d::OrderedDict)\nDAG(name::AbstractString, str::AbstractString, df::DataFrame)\nDAG(name::AbstractString, str::AbstractString)\nDAG(name::AbstractString, a::NamedArray, df::DataFrame)\nDAG(name::AbstractString, a::NamedArray)","category":"page"},{"location":"#StructuralCausalModels.DAG","page":"StructuralCausalModels API","title":"StructuralCausalModels.DAG","text":"DAG\n\nDirected acyclic graph struct\n\nStruct\n\nDAG(\n* `name::AbstractString`                    : A name for the DAG object\n* `d::OrderedDictOrNothing`                 : DAG definition as an OrderedDict\n* `a::NamedArrayOrNothing`                  : Adjacency matrix\n* `e::NamedArrayOrNothing`                  : Edge matrix\n* `s::NamedArrayOrNothing`                  : Covariance matrix (optional)\n* `df::DataFrameOrNothing`                  : Variable observations (optional)\n* `vars::Vector{Symbol}`                    : Names of variables\n)\n\nPart of API, exported.\n\n\n\n\n\n","category":"type"},{"location":"#StructuralCausalModels.DAG-Tuple{AbstractString,OrderedDict,DataFrame}","page":"StructuralCausalModels API","title":"StructuralCausalModels.DAG","text":"DAG\n\nDirected acyclic graph constructor\n\nDAG(name, d, df)\n\n\nRequired arguments\n\n* `name::AbstractString`               : Variables used to compute correlation\n* `d`                                  : DAG definition as an\n                                           OrderedDict (see extended help)\n                                           AbstractString (as in ggm or dagitty)\n                                           AdjacencyMatrix\n\nOptional positional argument\n\n* `df::DataFrame`                      : DataFrame with observations\n\nReturns\n\n* `dag::DAG`                           : Boolean result of test\n\nExtended help\n\nIn the definition of the OrderedDict, read => as ~ in regression models or <- in causal models, e.g.\n\nd = OrderedDict(\n  :u => [:x, :v],\n  :s1 => [:u],\n  :w => [:v, :y],\n  :s2 => [:w]\n);\ndag = DAG(\"my_name\", d)\n\nComing from R's dagitty:\n\namat <- dagitty(\"dag { {X V} -> U; S1 <- U; {Y V} -> W; S2 <- W}”)\n\ndag = DAG(\"my_name\", \"dag { {X V} -> U; S1 <- U; {Y V} -> W; S2 <- W}”)\ndisplay(dag.a) # Show the adjacency_matrix\n\nComing from R's ggm:\n\namat <- DAG(U~X+V, S1~U, W~V+Y, S2~W, order=FALSE)\n\ndag = DAG(\"my_name\", \"DAG(U~X+V, S1~U, W~V+Y, S2~W”)\ndisplay(dag.a) # Show the adjacency_matrix\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nLicense\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of API, exported.\n\n\n\n\n\n","category":"method"},{"location":"#d_separation-1","page":"StructuralCausalModels API","title":"d_separation","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"d_separation(d::DAG, first::Vector{Symbol}, second::Vector{Symbol}, cond::SymbolList=nothing)","category":"page"},{"location":"#StructuralCausalModels.d_separation","page":"StructuralCausalModels API","title":"StructuralCausalModels.d_separation","text":"d_separation\n\nd_separation(d, first, second)\nd_separation(d, first, second, cond; debug)\n\n\nComputes the d_separation between 2 sets of nodes conditioned on a third set.\n\nRequired arguments\n\nd_separation(\n* `d::DAG`                             : DAG\n* `first::Vector{Symbol}`              : First set\n* `second::Vector{Symbol}`             : Second set\n)\n\nOptional arguments\n\n* `cond::Vector{Symbol}`               : Conditioning set\n* `debug=false`                        : Trace execution\n\nReturns\n\n* `res::Bool`                          : Boolean result of test\n\nExtended help\n\nExample\n\nd_separation between mechanics and statistics, conditioning on algebra\n\nusing StructuralCausalModels, CSV\n\ndf = CSV.read(scm_path(\"..\", \"data\", \"marks.csv\");\n\nd = OrderedDict(\n  :mechanics => [:vectors, :algebra],\n  :vectors => [:algebra],\n  :analysis => [:algebra],\n  :statistics => [:algebra, :analysis]\n);\n\ndag = DAG(\"marks\", d, df);\nd_separation(marks, [:statistics], [:mechanics], [:algebra]))\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nLicense\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of the API, exported.\n\n\n\n\n\n","category":"function"},{"location":"#shipley_test-1","page":"StructuralCausalModels API","title":"shipley_test","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"shipley_test(d::DAG)","category":"page"},{"location":"#StructuralCausalModels.shipley_test-Tuple{DAG}","page":"StructuralCausalModels API","title":"StructuralCausalModels.shipley_test","text":"shipley_test\n\nshipley_test(d)\n\n\nTest of all independencies implied by a given DAG\n\nComputes a simultaneous test of all independence relationships implied by a given Gaussian model defined according to a directed acyclic graph, based on the sample covariance matrix.\n\nThe test statistic is C = -2 sum(ln(pj)) where pj are the p-values of tests of conditional independence in the basis set computed by basiSet(A). The p-values are independent uniform variables on (0,1) and the statistic has exactly a chi square distribution on 2k degrees of freedom where k is the number of elements of the basis set.  Shipley (2002) calls this test Fisher's C test.\n\nMethod\n\nshipley_test(;\n* `d::Dag`                             : Directed acyclic graph\n)\n\nReturns\n\n* `res::NamedTuple`                    : (ctest=..., dof=..., pval=...)\n\nwhere:\n\nctest: Test statistic C   dof:   Degrees of freedom.   pval:  The P-value of the test, assuming a two-sided alternative.\n\nExtended help\n\nExample\n\nShipley_test for the mathematics marks data\n\nusing StructuralCausalModels, RData\n\nobjs = RData.load(scm_path(\"..\", \"data\", \"marks.rda\");\nmarks_df = objs[\"marks\"]\n\nd = OrderedDict(\n  :mechanics => [:vectors, :algebra],\n  :vectors => [:algebra],\n  :statistics => [:algebra, :analysis],\n  :analysis => [:algebra]\n);\ndag = Dag(d; df=df)\nshipley_test(dag)\n\nSee also\n\n?Dag\n?basis_set\n?pcor_test\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nReferences\n\nShipley, B. (2000). A new inferential test for path models based on directed acyclic graphs. Structural Equation Modeling, 7(2), 206–218.\n\nLicence\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of the api, exported.\n\n\n\n\n\n","category":"method"},{"location":"#basis_set-1","page":"StructuralCausalModels API","title":"basis_set","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"basis_set(dag::DAG)","category":"page"},{"location":"#StructuralCausalModels.basis_set-Tuple{DAG}","page":"StructuralCausalModels API","title":"StructuralCausalModels.basis_set","text":"basis_set\n\nDetermine basis_set\n\nbasis_set(dag)\n\n\nPart of API, exported.\n\n\n\n\n\n","category":"method"},{"location":"#ancestral_graph-1","page":"StructuralCausalModels API","title":"ancestral_graph","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"ancestral_graph(d::DAG, m::Vector{Symbol}, c::Vector{Symbol})\nancestral_graph(a::NamedArray{Int, 2}, m::Vector{Symbol}, c::Vector{Symbol})","category":"page"},{"location":"#adjustment_sets-1","page":"StructuralCausalModels API","title":"adjustment_sets","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"adjustment_sets(d::DAG, f::Symbol, l::Symbol, u::Vector{Symbol})\nadjustment_sets(d::DAG, f::Symbol, l::Symbol)","category":"page"},{"location":"#paths-1","page":"StructuralCausalModels API","title":"paths","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"all_paths(d::DAG, f::Symbol, l::Symbol)\nbackdoor_paths(d::DAG, paths::Vector{Vector{Symbol}}, f::Symbol)\ncheck_open(d::DAG, path::Vector{Symbol})\nopen_paths(d::DAG, paths::Vector{Vector{Symbol}})\n","category":"page"},{"location":"#Internals-1","page":"StructuralCausalModels API","title":"Internals","text":"","category":"section"},{"location":"#","page":"StructuralCausalModels API","title":"StructuralCausalModels API","text":"adjacency_matrix(d::OrderedDict)\nadjacency_matrix(e::NamedArray)\nadjacency_matrix_to_dict(ea::NamedArray)\nancester_graph(e::NamedArray)\nall_edges(a::NamedArray)\nblocking_sets(asets::Array{Array{Symbol,1},1})\ndag_show(io::IO, d::DAG)\ndag_vars(d::OrderedDict)\nedge_matrix(d::OrderedDict)\nedge_matrix(a::NamedArray, inv=false)\nforward_path(d::DAG, path)\nhandle_rhs!(vars::Vector{Symbol}, rhs::SymbolList)\nindicator_matrix(e::NamedArray)\ninduced_covariance_graph(d::DAG, sel::Vector{Symbol}, cond::SymbolList; debug=false)\nnode_edges(p::Path, s::Symbol, l::Symbol)\npcor(u::Vector{Symbol}, S::NamedArray)\ntopological_order(a::NamedArray)\ntopological_sort(a::NamedArray)\ntransitive_closure(a::NamedArray)\nset_dag_df!(d::DAG, df::DataFrameOrNothing; force=false)\nset_dag_cov_matrix!(d::DAG, cm::NamedArrayOrNothing; force=false)\nundirected_matrix(d::DAG)","category":"page"},{"location":"#StructuralCausalModels.adjacency_matrix-Tuple{OrderedDict}","page":"StructuralCausalModels API","title":"StructuralCausalModels.adjacency_matrix","text":"adjacency_matrix\n\nadjacency_matrix(d)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.adjacency_matrix-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.adjacency_matrix","text":"adjacency_matrix\n\nadjacency_matrix(e)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.adjacency_matrix_to_dict-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.adjacency_matrix_to_dict","text":"adjacency_matrix to OrderedDict\n\nadjacency_matrix_to_dict(ea)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.ancester_graph-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.ancester_graph","text":"ancestor_graph\n\nancester_graph(e)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.dag_vars-Tuple{OrderedDict}","page":"StructuralCausalModels API","title":"StructuralCausalModels.dag_vars","text":"dag_vars\n\ndag_vars(d)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.edge_matrix-Tuple{OrderedDict}","page":"StructuralCausalModels API","title":"StructuralCausalModels.edge_matrix","text":"edge_matrix\n\nedge_matrix(d)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.edge_matrix","page":"StructuralCausalModels API","title":"StructuralCausalModels.edge_matrix","text":"edge_matrix\n\nedge_matrix(a)\nedge_matrix(a, inv)\n\n\nInternal\n\n\n\n\n\n","category":"function"},{"location":"#StructuralCausalModels.indicator_matrix-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.indicator_matrix","text":"indicator_matrix\n\nindicator_matrix(e)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.induced_covariance_graph-Tuple{DAG,Array{Symbol,1},Union{Nothing, Array{Symbol,1}, Symbol}}","page":"StructuralCausalModels API","title":"StructuralCausalModels.induced_covariance_graph","text":"inducedcovariancegraph\n\ninduced_covariance_graph(d, sel, cond; debug)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.pcor-Tuple{Array{Symbol,1},NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.pcor","text":"pcor\n\npcor(u, S)\n\n\nComputes the partial correlation between two variables given a set of other variables.\n\nMethod\n\npcor(;\n* `u::Vector{Symbol}`                  : Variables used to compute correlation\n* `S::Matrix`                          : Sample covariance matrix\n)\n\nwhere:\n\nu[1], u[2]: Variables used to compute correlation between, remaining variables   are the conditioning set\n\nReturns\n\n* `res::Float64`                       : Correlation between u[1] and u[2]\n\nExtended help\n\nExample\n\nCorrelation between vectors and algebra, conditioning on analysis and statistics\n\nusing StructuralCausalModels, CSV\n\ndf = CSV.read(scm_path(\"..\", \"data\", \"marks.csv\");\nS = cov(Array(df))\n\nu = [2, 3, 4, 5]\npcor(u, S)\nu = [:vectors, :algebra, :statistics, :analysis]\n\nAcknowledgements\n\nOriginal author:                       Giovanni M. Marchetti\n\nTranslated to Julia:                   Rob J Goedman\n\nLicense\n\nThe R package ggm is licensed under License: GPL-2.\n\nThe Julia translation is licenced under: MIT.\n\nPart of the api, not exported.\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.topological_order-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.topological_order","text":"topological_order\n\ntopological_order(a)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.topological_sort-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.topological_sort","text":"topological_sort\n\ntopological_sort(a)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.transitive_closure-Tuple{NamedArray}","page":"StructuralCausalModels API","title":"StructuralCausalModels.transitive_closure","text":"transitive_closure\n\ntransitive_closure(a)\n\n\nInternal\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.set_dag_df!-Tuple{DAG,Union{Nothing, DataFrame}}","page":"StructuralCausalModels API","title":"StructuralCausalModels.set_dag_df!","text":"setdagdf!\n\nSet or update Dataframe associated to DAG\n\nset_dag_df!(d, df; force)\n\n\nRequired arguments\n\n* `d::DAG`                                  : Previously defined DAG object \n* `df::DataFrameOrNothing`                  : DataFrame associated with DAG\n)\n\nOptional arguments\n\n* `force=false`                             : Force assignment of df \n)\n\nThe force = true option can be used if the DAG involves unobserved nodes.\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.set_dag_cov_matrix!-Tuple{DAG,Union{Nothing, NamedArray}}","page":"StructuralCausalModels API","title":"StructuralCausalModels.set_dag_cov_matrix!","text":"setdagcov_matrix!\n\nSet or update the covariance matrix associated to DAG\n\nset_dag_cov_matrix!(d, cm; force)\n\n\nRequired arguments\n\n* `d::DAG`                                  : Previously defined DAG object \n* `cm::NamedArrayOrNothing`                 : Covariance matrix in NamedArray format\n)\n\nOptional arguments\n\n* `force=false`                             : Force assignment of df \n)\n\nThe force = true option can be used if the DAG involves unobserved nodes.\n\n\n\n\n\n","category":"method"},{"location":"#StructuralCausalModels.undirected_matrix-Tuple{DAG}","page":"StructuralCausalModels API","title":"StructuralCausalModels.undirected_matrix","text":"undirected_matrix\n\nundirected_matrix(d)\n\n\nInternal\n\n\n\n\n\n","category":"method"}]
}
